}
)
i = i+1
}
for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
ef_line[i, 'Portfolio'] =paste0(
for (n in 1:length(ef_w)){
paste0(colnames(df)[n],":",round(ef_w,2),"<br>")
}
)
i = i+1
}
paste0(colnames(df)[n],":",round(ef_w[n],2),"<br>")
for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
ef_line[i, 'Portfolio'] =paste0(
for (n in 1:length(ef_w)){
paste0(colnames(df)[n],":",round(ef_w[n],2),"<br>")
}
)
i = i+1
}
ef_line[i, 'Portfolio'] = for (n in 1:length(ef_w)){
paste0(colnames(df)[n],":",round(ef_w[n],2),"<br>")
}
n=1
colnames(df)[n]
round(ef_w[n],2)
as.character(ef_w)
as.character(round(ef_w), 4)
as.character(round(ef_w, 4))
as.character(round(ef_w, 4)*100)
paste(c(colnames(df), as.character(round(ef_w, 4)*100)))
c(colnames(df)
)
paste(c(colnames(df)), as.character(round(ef_w, 4)*100), sep=': ')
paste(c(colnames(df)), as.character(round(ef_w, 4)*100), "%", sep=': ')
paste(c(colnames(df)),
paste(as.character(round(ef_w, 4)*100), "%"), sep=': ')
paste(c(colnames(df)),
paste(as.character(round(ef_w, 4)*100), "%"), sep=": ", collapse = "<br>")
for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
ef_line[i, 'Portfolio'] = paste(c(colnames(df)),
paste(as.character(round(ef_w, 4)*100), "%"), sep=": ", collapse = "<br>")
i = i+1
}
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio), group=1), color='steelblue3', size =5, alpha=0.5) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
tret_vector = seq(min_tret, max_tret, length.out = 20)
ef_line = data.frame(Risk = rep(NA, length(tret_vector)), Return = rep(NA, length(tret_vector)),
Portfolio = rep(NA, length(tret_vector))) #Place holder
i =1 #counter
for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
ef_line[i, 'Portfolio'] = paste(c(colnames(df)),
paste(as.character(round(ef_w, 4)*100), "%"), sep=": ", collapse = "<br>")
i = i+1
}
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) +
ylim(0,1) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) +
ylim(0,0.15) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) +
ylim(0,0.12) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) +
ylim(0,0.10) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
runif
?runif
rbinom
?rbinom
shiny::runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
library(datasets)
data("chickwts")
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
rmarkdown::render()
rmarkdown::render()
rmarkdown::render(Theory.Rmd, output_format = 'html')
install.packages('xml2')
library(xml2)
file_path = '~/Documents/NYCDSA/Projects/AMShiny/Prepare/Theory.html'
xml2::write_html(rvest::html_node(xml2::read_html(file_path), "body"), file = file_path)
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
# Set cridentials for plotly
Sys.setenv("plotly_username"="mike@stukalo.com")
Sys.setenv("plotly_api_key"="STUKmi00")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ggthemes)
library(plotly)
library(xts)
source('../Prepare/am_helper.R')
# Set cridentials for plotly
Sys.setenv("plotly_username"="mike@stukalo.com")
Sys.setenv("plotly_api_key"="STUKmi00")
# set strings as factors to false
options(stringsAsFactors = FALSE)
df = read.csv('./Data/returns.csv', row.names = 'date')
df = df[rownames(df)<"2018-10-01",]
# Convert to zoo
returns = xts(df, order.by = as.Date(rownames(df)))
# Calculate annualized mean returns, sd of returns and covariance
mean_ret = apply(returns, 2, mean) * 250
sd_ret = apply(returns, 2, sd) * sqrt(250)
cov_matrix = cov(returns) * 250
df1 = data.frame(Asset = colnames(df), Return = mean_ret, Risk = sd_ret)
g1 = ggplot(df1, aes(x=Risk, y=Return, label=Asset)) + geom_point(color="steelblue3")  + ggtitle('Risk/Return of Asset Classes\n(annualized)') + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized') + xlim(0, 0.4) +
ylim(0,0.15) + theme_hc()
g1 = ggplotly(g1, tooltip = c("x","y")) %>%   add_annotations(x = df1$Risk,
y = df1$Return,
text = df1$Asset,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 40,
ay = -15)
g1$x$data[[1]]$text = paste("Return:", round(df1$Return, 4) * 100, "%","<br>",
"Risk:", round(df1$Risk, 4) * 100, "%")
g1
api_create(g1, filename = "risk_return_assets")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ggthemes)
library(plotly)
library(xts)
source('../Prepare/am_helper.R')
# Set cridentials for plotly
Sys.setenv("plotly_username"="mikestukalo")
Sys.setenv("plotly_api_key"="STUKmi00")
# set strings as factors to false
options(stringsAsFactors = FALSE)
df = read.csv('./Data/returns.csv', row.names = 'date')
df = df[rownames(df)<"2018-10-01",]
# Convert to zoo
returns = xts(df, order.by = as.Date(rownames(df)))
# Calculate annualized mean returns, sd of returns and covariance
mean_ret = apply(returns, 2, mean) * 250
sd_ret = apply(returns, 2, sd) * sqrt(250)
cov_matrix = cov(returns) * 250
api_create(g1, filename = "risk_return_assets")
Sys.setenv("plotly_username"="mikestukalo")
Sys.setenv("plotly_api_key"="5Lt9Tyj4SqGeycmmavBz")
api_create(g1, filename = "risk_return_assets")
``{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ggthemes)
library(plotly)
library(xts)
source('../Prepare/am_helper.R')
# set strings as factors to false
options(stringsAsFactors = FALSE)
df = read.csv('./Data/returns.csv', row.names = 'date')
df = df[rownames(df)<"2018-10-01",]
# Convert to zoo
returns = xts(df, order.by = as.Date(rownames(df)))
# Calculate annualized mean returns, sd of returns and covariance
mean_ret = apply(returns, 2, mean) * 250
sd_ret = apply(returns, 2, sd) * sqrt(250)
cov_matrix = cov(returns) * 250
df1 = data.frame(Asset = colnames(df), Return = mean_ret, Risk = sd_ret)
g1 = ggplot(df1, aes(x=Risk, y=Return, label=Asset)) + geom_point(color="steelblue3")  + ggtitle('Risk/Return of Asset Classes\n(annualized)') + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized') + xlim(0, 0.4) +
ylim(0,0.15) + theme_hc()
g1 = ggplotly(g1, tooltip = c("x","y")) %>%   add_annotations(x = df1$Risk,
y = df1$Return,
text = df1$Asset,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 40,
ay = -15)
g1$x$data[[1]]$text = paste("Return:", round(df1$Return, 4) * 100, "%","<br>",
"Risk:", round(df1$Risk, 4) * 100, "%")
api_create(g1, filename = "risk_return_assets")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ggthemes)
library(plotly)
library(xts)
source('../Prepare/am_helper.R')
# set strings as factors to false
options(stringsAsFactors = FALSE)
df = read.csv('./Data/returns.csv', row.names = 'date')
df = df[rownames(df)<"2018-10-01",]
# Convert to zoo
returns = xts(df, order.by = as.Date(rownames(df)))
# Calculate annualized mean returns, sd of returns and covariance
mean_ret = apply(returns, 2, mean) * 250
sd_ret = apply(returns, 2, sd) * sqrt(250)
cov_matrix = cov(returns) * 250
df1 = data.frame(Asset = colnames(df), Return = mean_ret, Risk = sd_ret)
g1 = ggplot(df1, aes(x=Risk, y=Return, label=Asset)) + geom_point(color="steelblue3")  + ggtitle('Risk/Return of Asset Classes\n(annualized)') + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized') + xlim(0, 0.4) +
ylim(0,0.15) + theme_hc()
g1 = ggplotly(g1, tooltip = c("x","y")) %>%   add_annotations(x = df1$Risk,
y = df1$Return,
text = df1$Asset,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 40,
ay = -15)
g1$x$data[[1]]$text = paste("Return:", round(df1$Return, 4) * 100, "%","<br>",
"Risk:", round(df1$Risk, 4) * 100, "%")
api_create(g1, filename = "risk_return_assets")
risk_ret_ann = df %>% mutate(date = as.Date(rownames(df))) %>%
gather(key = "Asset", value="Return", -date) %>%
mutate(year = year(date)) %>%
group_by(Asset, year) %>%
summarize(av_ret = mean(Return)*250, Risk = sd(Return)*sqrt(250) ) %>%
rename(Return=av_ret)
g2 = ggplot(risk_ret_ann, aes(x=Risk, y=Return, text = paste(year,"<br>","Return:",
round(Return,4)*100,"%","<br>", "Risk:", round(Risk,4)*100,"%"))) +
geom_point(color="steelblue3")  +
xlab('Risk (standard deviation of returns, annualized)') +
ylab('Average Returns, annualized') +
theme_hc() + facet_wrap(~reorder(Asset, Risk, sd))
g2 = ggplotly(g2, tooltip = c("text"))
g2
g1 = ggplot(df1, aes(x=Risk, y=Return, label=Asset)) + geom_point(color="steelblue3")  + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized') + xlim(0, 0.4) +
ylim(0,0.15) + theme_hc()
g1 = ggplotly(g1, tooltip = c("x","y")) %>%   add_annotations(x = df1$Risk,
y = df1$Return,
text = df1$Asset,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 40,
ay = -15)
g1$x$data[[1]]$text = paste("Return:", round(df1$Return, 4) * 100, "%","<br>",
"Risk:", round(df1$Risk, 4) * 100, "%")
api_create(g1, filename = "risk_return_assets")
api_create(g2, filename = "risk_return_assets_by_year")
order = risk_ret_ann %>% group_by(Asset) %>% summarise(sd_SD=sd(Risk)) %>% arrange(sd_SD) %>% select(Asset)
order = order[['Asset']]
risk_ret_cum = df %>% mutate(date=rownames(df)) %>%
gather(key="Asset", value="Return", -date) %>%
group_by(Asset) %>%
arrange(date) %>%
mutate(cumRet = cumprod(1+Return) - 1)
# Re-arrange
risk_ret_cum$facet = factor(risk_ret_cum$Asset, levels = c(order))
g3 = ggplot(risk_ret_cum, aes(x=as.Date(date), y=cumRet, text = paste(date,"<br>", "Compound return:", round(cumRet,4)*100,"%"), group=1)) + geom_line(color="steelblue3") + facet_wrap(~facet) + scale_x_date(date_breaks = "5 years", date_labels =  "%y") + xlab('Years') + ylab('Compound Return') + theme_hc()
g3 = ggplotly(g3, tooltip = "text")
g3
api_create(g3, filename = "assets_compund_ret")
installed.packages('htmlwidgets')
install.packages('htmlwidgets')
install.packages("htmlwidgets")
install.packages("htmlwidgets")
library(htmlwidgets)
shiny::runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
df = read.csv('./data/returns.csv', row.names = 'date')
setwd('~/Documents/NYCDSA/Projects/AMShiny/AMShinyApp/')
df = read.csv('./data/returns.csv', row.names = 'date')
df = df[rownames(df)<"2018-10-01",]
# Convert to zoo
returns = xts(df, order.by = as.Date(rownames(df)))
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ggthemes)
library(plotly)
library(xts)
source('./func/am_helper.R')
source('./func/am_helper.R')
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ggthemes)
library(plotly)
library(xts)
source('./func/am_helper.R')
# Part 1 for Theory descriprion
df = read.csv('./data/returns.csv', row.names = 'date')
df = df[rownames(df)<"2018-10-01",]
# Convert to zoo
returns = xts(df, order.by = as.Date(rownames(df)))
mean_ret = apply(returns, 2, mean) * 250
sd_ret = apply(returns, 2, sd) * sqrt(250)
cov_matrix = cov(returns) * 250
#  Plot graph 1
df1 = data.frame(Asset = colnames(df), Return = mean_ret, Risk = sd_ret)
g1 = ggplot(df1, aes(x=Risk, y=Return, label=Asset)) + geom_point(color="steelblue3")  + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized') + xlim(0, 0.4) +
ylim(0,0.15) + theme_hc()
g1 = ggplotly(g1, tooltip = c("x","y")) %>%   add_annotations(x = df1$Risk,
y = df1$Return,
text = df1$Asset,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 40,
ay = -15)
g1$x$data[[1]]$text = paste("Return:", round(df1$Return, 4) * 100, "%","<br>",
"Risk:", round(df1$Risk, 4) * 100, "%")
g1
# Plot graph 2
risk_ret_ann = df %>% mutate(date = as.Date(rownames(df))) %>%
gather(key = "Asset", value="Return", -date) %>%
mutate(year = year(date)) %>%
group_by(Asset, year) %>%
summarize(av_ret = mean(Return)*250, Risk = sd(Return)*sqrt(250) ) %>%
rename(Return=av_ret)
g2 = ggplot(risk_ret_ann, aes(x=Risk, y=Return, text = paste(year,"<br>","Return:",
round(Return,4)*100,"%","<br>", "Risk:", round(Risk,4)*100,"%"))) +
geom_point(color="steelblue3")  +
xlab('Risk (standard deviation of returns, annualized)') +
ylab('Average Returns, annualized') +
theme_hc() + facet_wrap(~reorder(Asset, Risk, sd))
g2 = ggplotly(g2, tooltip = c("text"))
g2
order = risk_ret_ann %>% group_by(Asset) %>% summarise(sd_SD=sd(Risk)) %>% arrange(sd_SD) %>% select(Asset)
order = order[['Asset']]
risk_ret_cum = df %>% mutate(date=rownames(df)) %>%
gather(key="Asset", value="Return", -date) %>%
group_by(Asset) %>%
arrange(date) %>%
mutate(cumRet = cumprod(1+Return) - 1)
# Re-arrange
risk_ret_cum$facet = factor(risk_ret_cum$Asset, levels = c(order))
g3 = ggplot(risk_ret_cum, aes(x=as.Date(date), y=cumRet, text = paste(date,"<br>", "Compound return:", round(cumRet,4)*100,"%"), group=1)) + geom_line(color="steelblue3") + facet_wrap(~facet) + scale_x_date(date_breaks = "5 years", date_labels =  "%y") + xlab('Years') + ylab('Compound Return') + theme_hc()
g3 = ggplotly(g3, tooltip = "text")
g3
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ggthemes)
library(plotly)
library(xts)
source('../Prepare/am_helper.R')
# set strings as factors to false
options(stringsAsFactors = FALSE)
df = read.csv('./Data/returns.csv', row.names = 'date')
df = df[rownames(df)<"2018-10-01",]
# Convert to zoo
returns = xts(df, order.by = as.Date(rownames(df)))
# Calculate annualized mean returns, sd of returns and covariance
mean_ret = apply(returns, 2, mean) * 250
sd_ret = apply(returns, 2, sd) * sqrt(250)
cov_matrix = cov(returns) * 250
sim_port = simPortfolios(mean_ret, cov_matrix, nsim = 20000)
write.csv(sim_port, "./data/sim_port.csv", row.names = F)
# Plot graph 4
# Sim portfolios were simulated using am_helper.R (simPortfolios)
sim_port = read.csv("./data/sim_port.csv")
View(sim_port)
min_tret = sim_port[sim_port$Risk==min(sim_port$Risk), "Return"][[1]]  #Usually a good starting point
max_tret = max(sim_port$Return)
tret_vector = seq(min_tret, max_tret, length.out = 20)
ef_line = data.frame(Risk = rep(NA, length(tret_vector)), Return = rep(NA, length(tret_vector)),
Portfolio = rep(NA, length(tret_vector))) #Place holder
i =1 #counter
for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
ef_line[i, 'Portfolio'] = paste(c(colnames(df)),
paste(as.character(round(ef_w, 4)*100), "%"), sep=": ", collapse = "<br>")
i = i+1
}
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) +
ylim(0,0.10) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
g1 = g1 %>% layout(height = 600, width = 600, title = "Risk/Return of Assets\nAnnualized")
g1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(g2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
date_choices = seq(as.Date("2000-01-01"), as.Date("2018-09-30"), by="1 month")
date_choices[255]
date_choices[254]
date_choices[253]
date_choices
date_choices = seq(as.Date("2000-01-01"), as.Date("2018-10-01"), by="1 month")
date_choices
date_choices[-1]
date_choices[length(date_choices)] = as.Date("2018-09-30")
date_choices
runApp()
runApp()
runApp()
install.packages('shinyWidgets')
runApp()
runApp()
?sliderTextInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
