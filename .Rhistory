for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
i = i+1
}
ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return), color='steelblue3', size =5, alpha=0.5)
ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return), color='steelblue3', size =5, alpha=0.5) + theme_hc()
ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = paste(date,"<br>", "Compound return:", round(cumRet,4)*100,"%"), group=1), color='steelblue3', size =5, alpha=0.5) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = paste("Return:", round(Return,4)*100,"%","<br>", "Risk:", round(Risk,4)*100,"%"), group=1), color='steelblue3', size =5, alpha=0.5) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = paste("Return:", round(Return,4)*100,"%","<br>", "Risk:", round(Risk,4)*100,"%"), group=1), color='steelblue3', size =5, alpha=0.5) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
colnames(mean_ret)
for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
ef_line[i, Portfolio] =paste0(
for (n in 1:length(ef_w)){
paste0(colnames(df)[n],":",round(ef_w,2),"<br>")
}
)
i = i+1
}
for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
ef_line[i, 'Portfolio'] =paste0(
for (n in 1:length(ef_w)){
paste0(colnames(df)[n],":",round(ef_w,2),"<br>")
}
)
i = i+1
}
paste0(colnames(df)[n],":",round(ef_w[n],2),"<br>")
for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
ef_line[i, 'Portfolio'] =paste0(
for (n in 1:length(ef_w)){
paste0(colnames(df)[n],":",round(ef_w[n],2),"<br>")
}
)
i = i+1
}
ef_line[i, 'Portfolio'] = for (n in 1:length(ef_w)){
paste0(colnames(df)[n],":",round(ef_w[n],2),"<br>")
}
n=1
colnames(df)[n]
round(ef_w[n],2)
as.character(ef_w)
as.character(round(ef_w), 4)
as.character(round(ef_w, 4))
as.character(round(ef_w, 4)*100)
paste(c(colnames(df), as.character(round(ef_w, 4)*100)))
c(colnames(df)
)
paste(c(colnames(df)), as.character(round(ef_w, 4)*100), sep=': ')
paste(c(colnames(df)), as.character(round(ef_w, 4)*100), "%", sep=': ')
paste(c(colnames(df)),
paste(as.character(round(ef_w, 4)*100), "%"), sep=': ')
paste(c(colnames(df)),
paste(as.character(round(ef_w, 4)*100), "%"), sep=": ", collapse = "<br>")
for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
ef_line[i, 'Portfolio'] = paste(c(colnames(df)),
paste(as.character(round(ef_w, 4)*100), "%"), sep=": ", collapse = "<br>")
i = i+1
}
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio), group=1), color='steelblue3', size =5, alpha=0.5) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
tret_vector = seq(min_tret, max_tret, length.out = 20)
ef_line = data.frame(Risk = rep(NA, length(tret_vector)), Return = rep(NA, length(tret_vector)),
Portfolio = rep(NA, length(tret_vector))) #Place holder
i =1 #counter
for (ret in tret_vector){
ef_w = findEfficientFrontier.Return(returns, ret)
tmp.Ret = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[1]]
tmp.Risk = calcPortPerformance(ef_w, mean_ret, cov_matrix)[[2]]
ef_line[i,'Return'] = tmp.Ret
ef_line[i,'Risk'] = tmp.Risk
ef_line[i, 'Portfolio'] = paste(c(colnames(df)),
paste(as.character(round(ef_w, 4)*100), "%"), sep=": ", collapse = "<br>")
i = i+1
}
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) +
ylim(0,1) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) +
ylim(0,0.15) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) +
ylim(0,0.12) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
g4 = ggplot(data=sim_port, aes(x=Risk, y=Return)) + geom_point(data=sim_port, aes(x=Risk, y=Return), color='gray', alpha=0.5) +
geom_line(data=ef_line, aes(x=Risk, y=Return, text = Portfolio, group=1), color='steelblue3', size =5, alpha=0.5) +
ylim(0,0.10) + theme_hc() + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized')
g4 = ggplotly(g4, tooltip = "text")
g4
runif
?runif
rbinom
?rbinom
shiny::runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
library(datasets)
data("chickwts")
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
rmarkdown::render()
rmarkdown::render()
rmarkdown::render(Theory.Rmd, output_format = 'html')
install.packages('xml2')
library(xml2)
file_path = '~/Documents/NYCDSA/Projects/AMShiny/Prepare/Theory.html'
xml2::write_html(rvest::html_node(xml2::read_html(file_path), "body"), file = file_path)
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
# Set cridentials for plotly
Sys.setenv("plotly_username"="mike@stukalo.com")
Sys.setenv("plotly_api_key"="STUKmi00")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ggthemes)
library(plotly)
library(xts)
source('../Prepare/am_helper.R')
# Set cridentials for plotly
Sys.setenv("plotly_username"="mike@stukalo.com")
Sys.setenv("plotly_api_key"="STUKmi00")
# set strings as factors to false
options(stringsAsFactors = FALSE)
df = read.csv('./Data/returns.csv', row.names = 'date')
df = df[rownames(df)<"2018-10-01",]
# Convert to zoo
returns = xts(df, order.by = as.Date(rownames(df)))
# Calculate annualized mean returns, sd of returns and covariance
mean_ret = apply(returns, 2, mean) * 250
sd_ret = apply(returns, 2, sd) * sqrt(250)
cov_matrix = cov(returns) * 250
df1 = data.frame(Asset = colnames(df), Return = mean_ret, Risk = sd_ret)
g1 = ggplot(df1, aes(x=Risk, y=Return, label=Asset)) + geom_point(color="steelblue3")  + ggtitle('Risk/Return of Asset Classes\n(annualized)') + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized') + xlim(0, 0.4) +
ylim(0,0.15) + theme_hc()
g1 = ggplotly(g1, tooltip = c("x","y")) %>%   add_annotations(x = df1$Risk,
y = df1$Return,
text = df1$Asset,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 40,
ay = -15)
g1$x$data[[1]]$text = paste("Return:", round(df1$Return, 4) * 100, "%","<br>",
"Risk:", round(df1$Risk, 4) * 100, "%")
g1
api_create(g1, filename = "risk_return_assets")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ggthemes)
library(plotly)
library(xts)
source('../Prepare/am_helper.R')
# Set cridentials for plotly
Sys.setenv("plotly_username"="mikestukalo")
Sys.setenv("plotly_api_key"="STUKmi00")
# set strings as factors to false
options(stringsAsFactors = FALSE)
df = read.csv('./Data/returns.csv', row.names = 'date')
df = df[rownames(df)<"2018-10-01",]
# Convert to zoo
returns = xts(df, order.by = as.Date(rownames(df)))
# Calculate annualized mean returns, sd of returns and covariance
mean_ret = apply(returns, 2, mean) * 250
sd_ret = apply(returns, 2, sd) * sqrt(250)
cov_matrix = cov(returns) * 250
api_create(g1, filename = "risk_return_assets")
Sys.setenv("plotly_username"="mikestukalo")
Sys.setenv("plotly_api_key"="5Lt9Tyj4SqGeycmmavBz")
api_create(g1, filename = "risk_return_assets")
``{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ggthemes)
library(plotly)
library(xts)
source('../Prepare/am_helper.R')
# set strings as factors to false
options(stringsAsFactors = FALSE)
df = read.csv('./Data/returns.csv', row.names = 'date')
df = df[rownames(df)<"2018-10-01",]
# Convert to zoo
returns = xts(df, order.by = as.Date(rownames(df)))
# Calculate annualized mean returns, sd of returns and covariance
mean_ret = apply(returns, 2, mean) * 250
sd_ret = apply(returns, 2, sd) * sqrt(250)
cov_matrix = cov(returns) * 250
df1 = data.frame(Asset = colnames(df), Return = mean_ret, Risk = sd_ret)
g1 = ggplot(df1, aes(x=Risk, y=Return, label=Asset)) + geom_point(color="steelblue3")  + ggtitle('Risk/Return of Asset Classes\n(annualized)') + xlab('Risk (standard deviation of returns, annualized)') + ylab('Average Returns, annualized') + xlim(0, 0.4) +
ylim(0,0.15) + theme_hc()
g1 = ggplotly(g1, tooltip = c("x","y")) %>%   add_annotations(x = df1$Risk,
y = df1$Return,
text = df1$Asset,
xref = "x",
yref = "y",
showarrow = TRUE,
arrowhead = 4,
arrowsize = .5,
ax = 40,
ay = -15)
g1$x$data[[1]]$text = paste("Return:", round(df1$Return, 4) * 100, "%","<br>",
"Risk:", round(df1$Risk, 4) * 100, "%")
api_create(g1, filename = "risk_return_assets")
shiny::runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
shiny::runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
?uiOutput
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
?reactiveValues
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
weight = c(rep(1/5,6))
#Allocation pie chart
alloc = data.frame(wght = weight, asset = c("Russell2000","EuropeStocks","EMStocks","Treasury","CorpBond","RealEstate"))
View(alloc)
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset)) + geom_bar(width = 1, stat = "identity")
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset)) + geom_bar(width = 1, stat = "identity") + theme_hc()
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset)) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + theme_hc()
g5
weight = c(rep(1/6,6))
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset)) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + theme_hc()
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset)) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + theme_hc()
g5
#Allocation pie chart
alloc = data.frame(wght = weight, asset = c("Russell2000","EuropeStocks","EMStocks","Treasury","CorpBond","RealEstate"))
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset)) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + theme_hc()
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset)) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") + theme_hc()
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") + theme_hc()
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") + theme(axis.text.x=element_blank()) + theme_hc()
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank()) + theme_hc()
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank()
) + theme_hc()
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") + theme_hc() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank()
)
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") + theme_hc() +
theme(legend.position = "none")
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") + theme_hc() +
theme(legend.position = "none",
axis.text.x = element_blank())
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") + theme_hc() +
theme(legend.position = "none",
axis.text = element_blank(),
axis.ticks = element_blank())
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") + theme_hc() +
theme(legend.position = "none",
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank())
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") + theme_hc() +
theme(legend.position = "none",
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line.y = element_blank())
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") +  blank_theme +
theme(axis.text.x=element_blank())
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") +  blank_theme +
theme(axis.text.x=element_blank())
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") +  blank_theme +
theme(axis.text.x=element_blank()) +
geom_text(aes(y = value/3 + c(0, cumsum(value)[-length(value)]),
label = percent(value/100)), size=5)
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") +  blank_theme +
theme(axis.text.x=element_blank()) +
geom_text(label = percent(wght), size=5)
library(scales)
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") +  blank_theme +
theme(axis.text.x=element_blank()) +
geom_text(label = percent(wght), size=5)
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") +  blank_theme +
theme(axis.text.x=element_blank()) +
geom_text(aes(y=wght), label = percent(wght), size=5)
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") +  blank_theme +
theme(axis.text.x=element_blank()) +
geom_text(alloc, aes(y=wght), label = percent(wght), size=5)
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") +  blank_theme +
theme(axis.text.x=element_blank()) +
geom_text(aes(y=wght, label = percent(wght)), size=5)
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") +  blank_theme +
theme(axis.text.x=element_blank()) +
geom_text(aes(y = wght/6 + c(0, cumsum(wght)[-length(wght)]), label = percent(wght)), size=5)
g5
g5 = ggplot(alloc, aes(x="", y=wght, fill=asset, text = paste(asset,"\n",round(wght,2)))) + geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + scale_fill_brewer(palette="Blues") +  blank_theme +
theme(axis.text.x=element_blank())  + theme(legend.position = "none")
g5
g5 = ggplotly(g5, hight = 100, weight = 100, tooltip = "text")
g5
library(RColorBrewer)
brewer.pal(6, "Blues")
colors = brewer.pal(6, "Blues")
g5 = plot_ly(alloc, labels = ~asset, values = ~wght, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste(round(wght,4)*100, ' %'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = FALSE) %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
g5
g5 = plot_ly(alloc, labels = ~asset, values = ~wght, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#000'),
hoverinfo = 'text',
text = ~paste(round(wght,4)*100, ' %'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = FALSE) %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
g5
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
plot_ly(alloc, labels = ~asset, values = ~wght, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#000'),
hoverinfo = 'text',
text = ~paste(round(wght,4)*100, ' %'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
showlegend = FALSE) %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
source('./func/shiny_helper.R')
runApp('Documents/NYCDSA/Projects/AMShiny/AMShinyApp')
